{"version":3,"sources":["breakpoints.js","components/text-field/text-field.tsx","components/button/button.tsx","services/distance/distance.tsx","pages/distance/distance.tsx","pages/test/test.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["size","device","xs","sm","lg","Input","styled","input","TextField","onChangeHandler","onKeyPressHandler","onChange","onKeyPress","ButtonComponent","button","Button","onClickHandler","children","onClick","GetDistanceTo","fromAddress","toAddress","a","console","log","axios","get","encodeURIComponent","response","status","data","AppWrapper","div","LeftSectionWrapper","RightSectionWrapper","DirectionsFormWrapper","Label","label","Distance","distanceInMeters","timeInSeconds","useState","setFromAddress","setToAddress","travelTime","setTravelTime","distance","setDistance","ButtonClickHandler","distanceMeters","event","target","value","key","parseInt","Math","round","Test","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAAMA,G,MAEA,SAFAA,EAGA,SAGOC,EAAS,CACpBC,GAAG,eAAD,OANE,QAMF,KACFC,GAAG,eAAD,OAAiBH,EAAjB,KACFI,GAAG,eAAD,OAAiBJ,EAAjB,M,8CCNEK,EAAQC,IAAOC,MAAV,qEAcIC,EAJG,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,gBAAiBC,EAAwC,EAAxCA,kBACpC,OAAO,cAACL,EAAD,CAAOM,SAAUF,EAAiBG,WAAYF,KCXjDG,EAAkBP,IAAOQ,OAAV,iEAgBNC,EAJA,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,eAAgBC,EAA4B,EAA5BA,SAChC,OAAO,cAACJ,EAAD,CAAiBK,QAASF,EAA1B,SAA2CC,K,iBCdrC,SAAeE,EAA9B,oC,4CAAe,WACbC,EACAC,GAFa,eAAAC,EAAA,6DAKbC,QAAQC,IAAI,iBALC,SAMQC,IAAMC,IAAN,gEACsCC,mBACvDP,GAFiB,sBAGJO,mBAAmBN,KATvB,UAMTO,EANS,OAWbL,QAAQC,IAAII,GAGW,KAAnBA,EAASC,OAdA,yCAcsBD,EAASE,MAd/B,4C,sBCSf,I,UAAMC,EAAazB,IAAO0B,IAAV,6IAIL/B,EAAOE,IAKZ8B,EAAqB3B,IAAO0B,IAAV,sIAQlBE,EAAsB5B,IAAO0B,IAAV,gKASnBG,EAAwB7B,IAAO0B,IAAV,yEAKrBI,EAAQ9B,IAAO+B,MAAV,0BAmEIC,EAlDE,WAAO,IANAC,EARJC,EAcG,EACiBC,mBAAS,IAD1B,mBACdrB,EADc,KACDsB,EADC,OAEaD,mBAAS,IAFtB,mBAEdpB,EAFc,KAEHsB,EAFG,OAGeF,mBAAS,IAHxB,mBAGdG,EAHc,KAGFC,EAHE,OAIWJ,mBAAS,IAJpB,mBAIdK,EAJc,KAIJC,EAJI,KAOfC,EAAkB,uCAAG,4BAAA1B,EAAA,sEACJH,EAAcC,EAAaC,GADvB,OACrBO,EADqB,OAEzBiB,EAAcjB,EAASgB,YACvBG,EAAYnB,EAASqB,gBAHI,2CAAH,qDAMxB,OACE,eAAClB,EAAD,WACE,cAACE,EAAD,UACE,eAACE,EAAD,WACE,cAAC,EAAD,CACE1B,gBAAiB,SAACyC,GAChBR,EAAeQ,EAAMC,OAAOC,QAE9B1C,kBAAmB,SAACwC,GACA,UAAdA,EAAMG,KAAiBL,OAG/B,cAAC,EAAD,CACEvC,gBAAiB,SAACyC,GAChBP,EAAaO,EAAMC,OAAOC,QAE5B1C,kBAAmB,SAACwC,GACA,UAAdA,EAAMG,KAAiBL,OAG/B,cAAC,EAAD,CACEhC,eAAgB,SAACkC,GACfF,KAFJ,kCASJ,eAACd,EAAD,WACE,eAACE,EAAD,4BAzDYI,EAyDoBc,SAASV,GAxD3CJ,EAAgB,GAAU,GAAN,OAAUe,KAAKC,MAAMhB,GAArB,YAEpBA,EAAgB,KAAY,GAAN,OAAUe,KAAKC,MAAMhB,EAAgB,IAArC,YAEpB,GAAN,OAAUe,KAAKC,MAAMhB,EAAgB,GAAK,IAA1C,cAqDM,eAACJ,EAAD,yBAlDgBG,EAkDiBe,SAASR,GAjD5CP,EAAmB,IAAW,GAAN,OAAUgB,KAAKC,MAAMjB,GAArB,WAEtB,GAAN,OAAUgB,KAAKC,MAAOjB,EAAmB,IAAQ,IAAM,GAAvD,iBClDakB,EAJF,WACX,OAAO,yCCYUnD,IAAO0B,IAAV,6IAIL/B,EAAOE,IAKSG,IAAO0B,IAAV,sIAQI1B,IAAO0B,IAAV,gKASK1B,IAAO0B,IAAV,yEAKb1B,IAAO+B,MAAV,0BAqCIqB,MApBf,WAAgB,IAAD,EACyBjB,mBAAS,IADlC,gCAEqBA,mBAAS,KAF9B,gCAGuBA,mBAAS,KAHhC,gCAImBA,mBAAS,KAJ5B,mBAMb,OANa,UAOX,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,YC9DKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6378e2bb.chunk.js","sourcesContent":["const size = {\n  xs: \"425px\",\n  sm: \"768px\",\n  lg: \"1024px\",\n};\n\nexport const device = {\n  xs: `(max-width: ${size.xs})`,\n  sm: `(max-width: ${size.sm})`,\n  lg: `(max-width: ${size.lg})`,\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Input = styled.input`\n  padding: 5px 8px;\n  font-size: 24px;\n`;\n\ninterface TextFieldProps {\n  onChangeHandler?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPressHandler?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nconst TextField = ({ onChangeHandler, onKeyPressHandler }: TextFieldProps) => {\n  return <Input onChange={onChangeHandler} onKeyPress={onKeyPressHandler} />;\n};\n\nexport default TextField;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ButtonComponent = styled.button`\n  height: 42px;\n  font-size: 24px;\n`;\n\ninterface ButtonProps {\n  onClickHandler?: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => void;\n  children: string;\n}\n\nconst Button = ({ onClickHandler, children }: ButtonProps) => {\n  return <ButtonComponent onClick={onClickHandler}>{children}</ButtonComponent>;\n};\n\nexport default Button;\n","import axios from \"axios\";\n\nexport default async function GetDistanceTo(\n  fromAddress: string,\n  toAddress: string\n) {\n  // todo: move to another class\n  console.log(\"GetDistanceTo\");\n  var response = await axios.get(\n    `https://localhost:2442/DistanceCalculator?fromAddress=${encodeURIComponent(\n      fromAddress\n    )}&toAddress=${encodeURIComponent(toAddress)}`\n  );\n  console.log(response);\n\n  // todo: what happens when non 200?\n  if (response.status == 200) return response.data;\n\n  // .then((response) => {\n  //   console.log(response);\n  //   return response.data; // todo: Make response model?\n  // })\n  // .catch((err) => {\n  //   console.log(err);\n  // });\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../breakpoints\";\n\n// components\nimport TextField from \"../../components/text-field\";\nimport Button from \"../../components/button\";\n\n// services\nimport GetDistanceTo from \"../../services/distance\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  min-height: 100%;\n  align-items: stretch;\n  @media ${device.sm} {\n    flex-direction: column;\n  }\n`;\n\nconst LeftSectionWrapper = styled.div`\n  display: flex;\n  // background: blue;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst RightSectionWrapper = styled.div`\n  display: flex;\n  // background: red;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst DirectionsFormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.label``;\n\n// todo: move to helper file\nconst FormatTime = (timeInSeconds: number) => {\n  if (timeInSeconds < 60) return `${Math.round(timeInSeconds)} seconds`;\n\n  if (timeInSeconds < 3600) return `${Math.round(timeInSeconds / 60)} minutes`;\n\n  return `${Math.round(timeInSeconds / 60 / 60)} hours`;\n};\n\nconst FormatDistance = (distanceInMeters: number) => {\n  if (distanceInMeters < 100) return `${Math.round(distanceInMeters)} meters`;\n\n  return `${Math.round((distanceInMeters / 1000) * 10) / 10}km`;\n};\n\nconst Distance = () => {\n  const [fromAddress, setFromAddress] = useState(\"\");\n  const [toAddress, setToAddress] = useState(\"\");\n  const [travelTime, setTravelTime] = useState(\"\");\n  const [distance, setDistance] = useState(\"\");\n\n  // React.useEffect(() => console.log(fromAddress), [fromAddress]);\n  const ButtonClickHandler = async () => {\n    var response = await GetDistanceTo(fromAddress, toAddress);\n    setTravelTime(response.travelTime);\n    setDistance(response.distanceMeters);\n  };\n\n  return (\n    <AppWrapper>\n      <LeftSectionWrapper>\n        <DirectionsFormWrapper>\n          <TextField\n            onChangeHandler={(event) => {\n              setFromAddress(event.target.value);\n            }}\n            onKeyPressHandler={(event) => {\n              if (event.key === \"Enter\") ButtonClickHandler();\n            }}\n          />\n          <TextField\n            onChangeHandler={(event) => {\n              setToAddress(event.target.value);\n            }}\n            onKeyPressHandler={(event) => {\n              if (event.key === \"Enter\") ButtonClickHandler();\n            }}\n          />\n          <Button\n            onClickHandler={(event) => {\n              ButtonClickHandler();\n            }}\n          >\n            Get Distance To\n          </Button>\n        </DirectionsFormWrapper>\n      </LeftSectionWrapper>\n      <RightSectionWrapper>\n        <Label>Travel Time: {FormatTime(parseInt(travelTime))}</Label>\n        <Label>Distance: {FormatDistance(parseInt(distance))}</Label>\n      </RightSectionWrapper>\n    </AppWrapper>\n  );\n};\n\nexport default Distance;\n","import React from \"react\";\n\nconst Test = () => {\n  return <div>test </div>;\n};\n\nexport default Test;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { device } from \"./breakpoints\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n// components\nimport Distance from \"./pages/distance\";\nimport Test from \"./pages/test\";\nimport TextField from \"./components/text-field\";\nimport Button from \"./components/button\";\n\n// services\nimport GetDistanceTo from \"./services/distance\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  min-height: 100%;\n  align-items: stretch;\n  @media ${device.sm} {\n    flex-direction: column;\n  }\n`;\n\nconst LeftSectionWrapper = styled.div`\n  display: flex;\n  // background: blue;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst RightSectionWrapper = styled.div`\n  display: flex;\n  // background: red;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst DirectionsFormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.label``;\n\n// todo: move to helper file\nconst FormatTime = (timeInSeconds: number) => {\n  if (timeInSeconds < 60) return `${Math.round(timeInSeconds)} seconds`;\n\n  if (timeInSeconds < 3600) return `${Math.round(timeInSeconds / 60)} minutes`;\n\n  return `${Math.round(timeInSeconds / 60 / 60)} hours`;\n};\n\nconst FormatDistance = (distanceInMeters: number) => {\n  if (distanceInMeters < 100) return `${Math.round(distanceInMeters)} meters`;\n\n  return `${Math.round((distanceInMeters / 1000) * 10) / 10}km`;\n};\n\nfunction App() {\n  const [fromAddress, setFromAddress] = useState(\"\");\n  const [toAddress, setToAddress] = useState(\"\");\n  const [travelTime, setTravelTime] = useState(\"\");\n  const [distance, setDistance] = useState(\"\");\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Distance />\n        </Route>\n        <Route path=\"/test\">\n          <Test />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}